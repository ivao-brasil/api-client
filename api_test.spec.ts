/**
 * IVAO Brasil
 * API pÃºblica da IVAO Brasil
 *
 * OpenAPI spec version: 1.0.0
 * Contact: br-web@ivao.aero
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AirportsApi", () => {
  let instance: api.AirportsApi
  beforeEach(function() {
    instance = new api.AirportsApi(config)
  });

  test("airportsIcaoGet", () => {
    const icao: string = "icao_example"
    return expect(instance.airportsIcaoGet(icao, {})).resolves.toBe(null)
  })
  test("airportsRoutesIcaoGet", () => {
    const icao: string = "icao_example"
    return expect(instance.airportsRoutesIcaoGet(icao, {})).resolves.toBe(null)
  })
  test("airportsStatusGet", () => {
    return expect(instance.airportsStatusGet({})).resolves.toBe(null)
  })
})

describe("AuthApi", () => {
  let instance: api.AuthApi
  beforeEach(function() {
    instance = new api.AuthApi(config)
  });

  test("authGet", () => {
    return expect(instance.authGet({})).resolves.toBe(null)
  })
  test("authPost", () => {
    const body: api.Body = undefined
    return expect(instance.authPost(body, {})).resolves.toBe(null)
  })
})

describe("RoutesApi", () => {
  let instance: api.RoutesApi
  beforeEach(function() {
    instance = new api.RoutesApi(config)
  });

  test("routesDepDestGet", () => {
    const dep: string = "dep_example"
    const dest: string = "dest_example"
    return expect(instance.routesDepDestGet(dep, dest, {})).resolves.toBe(null)
  })
})

describe("TrainingScheduleApi", () => {
  let instance: api.TrainingScheduleApi
  beforeEach(function() {
    instance = new api.TrainingScheduleApi(config)
  });

  test("trainingScheduleSessionsGet", () => {
    const offset: number = 1.2
    const limit: number = 1.2
    const occurrenceDateBefore: string = 2013-10-20
    const occurrenceDateAfter: string = 2013-10-20
    return expect(instance.trainingScheduleSessionsGet(offset, limit, occurrenceDateBefore, occurrenceDateAfter, {})).resolves.toBe(null)
  })
  test("trainingScheduleSessionsIdGet", () => {
    const id: number = 56
    return expect(instance.trainingScheduleSessionsIdGet(id, {})).resolves.toBe(null)
  })
})

